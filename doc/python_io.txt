python文件IO接口:
    open(file_name, mode=?)
        mode:   'r'读取模式
                'w'是写入模式,如果是单纯的写入模式,会将文件旧内容删除！！！并且文件指针从头开始.
                'a'是附加模式,也可以写入,跟'w'区别在于不会删除旧内容,而是从文件末尾写入
                '+'是可以同时读写
        默认情况下open是'rt'模式，默认使用utf8编码,默认读取时自动替换所有换行符为'\n',写入时把'\n'替换为当前系统默认的换行符,这里有可能是个坑点啊！！！
        如果不希望以文本模式读取文件,可以指定'b'二进制模式

    顺序读写
    fd.write(str)
    fd.read(str_len)

    随机读写
    fd.seek(offset, whence=)
        移动文件指针到指定偏移量
    fd.tell()
        返回当前文件指针的偏移量

    fd.readline()
        读取一行
    fd.readlines()
        读取所有行
    fd.writelines()
        写入多行

    fd.close()
    fd.flush()
        重置缓冲区,马上写入到磁盘

    with语句的底层支持是上下文管理器,对应python的对象中__enter__和__exit__方法(这个有点类似C++的RAII)
        __enter__没有参数,返回值赋值给as后的变量
        __exit__接受三个参数,异常类型,异常对象,异常跟踪
        上下文管理器是基于生成器实现的yield返回赋值给as后的变量,离开代码块时会继续执行生成器剩余代码

    fileinput模块
        fd.readlines()会一次性地读取所有行到内存,然而实际使用上很多时候我们只是需要遍历一遍文件找到某个部分的内容,这个时候可以使用fileinput模块
        fileinput.input()会返回一个迭代器用于循环迭代访问文件,当且仅当读到这一行的时候才会读到内存,大胆推测一下实现上应该是一个封装了readline的迭代器


